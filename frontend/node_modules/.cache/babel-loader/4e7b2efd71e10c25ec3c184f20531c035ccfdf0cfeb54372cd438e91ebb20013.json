{"ast":null,"code":"var _jsxFileName = \"/Users/ayenikoemmanuel/Downloads/React/router-react-2/frontend/src/App.js\";\n// Challenge / Exercise\n\n// 1. Add five new (dummy) page components (content can be simple <h1> elements)\n//    - HomePage\n//    - EventsPage\n//    - EventDetailPage\n//    - NewEventPage\n//    - EditEventPage\n// 2. Add routing & route definitions for these five pages\n//    - / => HomePage\n//    - /events => EventsPage\n//    - /events/<some-id> => EventDetailPage\n//    - /events/new => NewEventPage\n//    - /events/<some-id>/edit => EditEventPage\n// 3. Add a root layout that adds the <MainNavigation> component above all page components\n// 4. Add properly working links to the MainNavigation\n// 5. Ensure that the links in MainNavigation receive an \"active\" class when active\n// 6. Output a list of dummy events to the EventsPage\n//    Every list item should include a link to the respective EventDetailPage\n// 7. Output the ID of the selected event on the EventDetailPage\n// BONUS: Add another (nested) layout route that adds the <EventNavigation> component above all /events... page components\n\nimport { RouterProvider, createBrowserRouter } from \"react-router-dom\";\nimport EditEventPage from \"./routes/EditEvent\";\nimport EventDetailPage from \"./routes/EventDetail\";\nimport EventsPage from \"./routes/Events\";\nimport EventsRootLayout from \"./routes/EventsRoot\";\nimport HomePage from \"./routes/Home\";\nimport NewEventPage from \"./routes/NewEvent\";\nimport RootLayout from \"./routes/Root\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst router = createBrowserRouter([{\n  path: \"\",\n  element: /*#__PURE__*/_jsxDEV(RootLayout, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 14\n  }, this),\n  children: [{\n    index: true,\n    element: /*#__PURE__*/_jsxDEV(HomePage, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 31\n    }, this)\n  }, {\n    path: \"events\",\n    element: /*#__PURE__*/_jsxDEV(EventsRootLayout, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 18\n    }, this),\n    children: [{\n      index: true,\n      element: /*#__PURE__*/_jsxDEV(EventsPage, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 22\n      }, this),\n      loader: async () => {\n        const response = await fetch(\"http://localhost:8080/events\");\n        if (!response.ok) {} else {\n          const resData = await response.json();\n        }\n      }\n    }, {\n      path: \":eventId\",\n      element: /*#__PURE__*/_jsxDEV(EventDetailPage, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 40\n      }, this)\n    }, {\n      path: \"new\",\n      element: /*#__PURE__*/_jsxDEV(NewEventPage, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 35\n      }, this)\n    }, {\n      path: \":eventId/edit\",\n      element: /*#__PURE__*/_jsxDEV(EditEventPage, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 45\n      }, this)\n    }]\n  }]\n}]);\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(RouterProvider, {\n    router: router\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 10\n  }, this);\n}\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["RouterProvider","createBrowserRouter","EditEventPage","EventDetailPage","EventsPage","EventsRootLayout","HomePage","NewEventPage","RootLayout","jsxDEV","_jsxDEV","router","path","element","fileName","_jsxFileName","lineNumber","columnNumber","children","index","loader","response","fetch","ok","resData","json","App","_c","$RefreshReg$"],"sources":["/Users/ayenikoemmanuel/Downloads/React/router-react-2/frontend/src/App.js"],"sourcesContent":["// Challenge / Exercise\n\n// 1. Add five new (dummy) page components (content can be simple <h1> elements)\n//    - HomePage\n//    - EventsPage\n//    - EventDetailPage\n//    - NewEventPage\n//    - EditEventPage\n// 2. Add routing & route definitions for these five pages\n//    - / => HomePage\n//    - /events => EventsPage\n//    - /events/<some-id> => EventDetailPage\n//    - /events/new => NewEventPage\n//    - /events/<some-id>/edit => EditEventPage\n// 3. Add a root layout that adds the <MainNavigation> component above all page components\n// 4. Add properly working links to the MainNavigation\n// 5. Ensure that the links in MainNavigation receive an \"active\" class when active\n// 6. Output a list of dummy events to the EventsPage\n//    Every list item should include a link to the respective EventDetailPage\n// 7. Output the ID of the selected event on the EventDetailPage\n// BONUS: Add another (nested) layout route that adds the <EventNavigation> component above all /events... page components\n\nimport { RouterProvider, createBrowserRouter } from \"react-router-dom\";\nimport EditEventPage from \"./routes/EditEvent\";\nimport EventDetailPage from \"./routes/EventDetail\";\nimport EventsPage from \"./routes/Events\";\nimport EventsRootLayout from \"./routes/EventsRoot\";\nimport HomePage from \"./routes/Home\";\nimport NewEventPage from \"./routes/NewEvent\";\nimport RootLayout from \"./routes/Root\";\n\nconst router = createBrowserRouter([\n  {\n    path: \"\",\n    element: <RootLayout />,\n    children: [\n      { index: true, element: <HomePage /> },\n      {\n        path: \"events\",\n        element: <EventsRootLayout />,\n        children: [\n          {\n            index: true,\n            element: <EventsPage />,\n            loader: async () => {\n              const response = await fetch(\"http://localhost:8080/events\");\n\n              if (!response.ok) {\n              } else {\n                const resData = await response.json();\n              }\n            },\n          },\n          { path: \":eventId\", element: <EventDetailPage /> },\n          { path: \"new\", element: <NewEventPage /> },\n          { path: \":eventId/edit\", element: <EditEventPage /> },\n        ],\n      },\n    ],\n  },\n]);\n\nfunction App() {\n  return <RouterProvider router={router} />;\n}\n\nexport default App;\n"],"mappings":";AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,cAAc,EAAEC,mBAAmB,QAAQ,kBAAkB;AACtE,OAAOC,aAAa,MAAM,oBAAoB;AAC9C,OAAOC,eAAe,MAAM,sBAAsB;AAClD,OAAOC,UAAU,MAAM,iBAAiB;AACxC,OAAOC,gBAAgB,MAAM,qBAAqB;AAClD,OAAOC,QAAQ,MAAM,eAAe;AACpC,OAAOC,YAAY,MAAM,mBAAmB;AAC5C,OAAOC,UAAU,MAAM,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvC,MAAMC,MAAM,GAAGV,mBAAmB,CAAC,CACjC;EACEW,IAAI,EAAE,EAAE;EACRC,OAAO,eAAEH,OAAA,CAACF,UAAU;IAAAM,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAAG;EACvBC,QAAQ,EAAE,CACR;IAAEC,KAAK,EAAE,IAAI;IAAEN,OAAO,eAAEH,OAAA,CAACJ,QAAQ;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAI,CAAC,EACtC;IACEL,IAAI,EAAE,QAAQ;IACdC,OAAO,eAAEH,OAAA,CAACL,gBAAgB;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAG;IAC7BC,QAAQ,EAAE,CACR;MACEC,KAAK,EAAE,IAAI;MACXN,OAAO,eAAEH,OAAA,CAACN,UAAU;QAAAU,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAG;MACvBG,MAAM,EAAE,MAAAA,CAAA,KAAY;QAClB,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;QAE5D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE,CAClB,CAAC,MAAM;UACL,MAAMC,OAAO,GAAG,MAAMH,QAAQ,CAACI,IAAI,EAAE;QACvC;MACF;IACF,CAAC,EACD;MAAEb,IAAI,EAAE,UAAU;MAAEC,OAAO,eAAEH,OAAA,CAACP,eAAe;QAAAW,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAI,CAAC,EAClD;MAAEL,IAAI,EAAE,KAAK;MAAEC,OAAO,eAAEH,OAAA,CAACH,YAAY;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAI,CAAC,EAC1C;MAAEL,IAAI,EAAE,eAAe;MAAEC,OAAO,eAAEH,OAAA,CAACR,aAAa;QAAAY,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAI,CAAC;EAEzD,CAAC;AAEL,CAAC,CACF,CAAC;AAEF,SAASS,GAAGA,CAAA,EAAG;EACb,oBAAOhB,OAAA,CAACV,cAAc;IAACW,MAAM,EAAEA;EAAO;IAAAG,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAAG;AAC3C;AAACU,EAAA,GAFQD,GAAG;AAIZ,eAAeA,GAAG;AAAC,IAAAC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}