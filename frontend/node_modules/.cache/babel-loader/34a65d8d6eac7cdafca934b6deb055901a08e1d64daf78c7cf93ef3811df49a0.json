{"ast":null,"code":"var _jsxFileName = \"/Users/ayenikoemmanuel/Downloads/React/router-react-2/frontend/src/routes/Events.jsx\",\n  _s = $RefreshSig$();\nimport EventsList from \"../components/EventsList\";\nimport { defer, json, useLoaderData, Await } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction EventsPage() {\n  _s();\n  const {\n    events\n  } = useLoaderData();\n  return /*#__PURE__*/_jsxDEV(Await, {\n    resolve: events,\n    children: loadedevents => /*#__PURE__*/_jsxDEV(EventsList, {\n      events: loadedevents\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 26\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 5\n  }, this);\n}\n_s(EventsPage, \"xTcuS98fsVcq20se00iLm8bDBmQ=\", false, function () {\n  return [useLoaderData];\n});\n_c = EventsPage;\nexport default EventsPage;\nasync function loadEvents() {\n  const response = await fetch(\"http://localhost:8080/events\");\n  if (!response.ok) {\n    // return { isError: true, message: \"Could not fetch events\" };\n    //\n    // throw new Response(JSON.stringify({ message: \"Could not fetch events.\" }), {\n    //   status: 500,\n    // });\n    throw json({\n      message: \"Could not fetch events.\"\n    }, {\n      status: 500\n    });\n  } else {\n    // const resData = await response.json();\n    // return resData.events;\n    return response;\n  }\n}\nexport function loader() {\n  defer({\n    events: loadEvents()\n  });\n}\nvar _c;\n$RefreshReg$(_c, \"EventsPage\");","map":{"version":3,"names":["EventsList","defer","json","useLoaderData","Await","jsxDEV","_jsxDEV","EventsPage","_s","events","resolve","children","loadedevents","fileName","_jsxFileName","lineNumber","columnNumber","_c","loadEvents","response","fetch","ok","message","status","loader","$RefreshReg$"],"sources":["/Users/ayenikoemmanuel/Downloads/React/router-react-2/frontend/src/routes/Events.jsx"],"sourcesContent":["import EventsList from \"../components/EventsList\";\n\nimport { defer, json, useLoaderData, Await } from \"react-router-dom\";\n\nfunction EventsPage() {\n  const { events } = useLoaderData();\n\n  return (\n    <Await resolve={events}>\n      {(loadedevents) => <EventsList events={loadedevents} />}\n    </Await>\n  );\n}\n\nexport default EventsPage;\n\nasync function loadEvents() {\n  const response = await fetch(\"http://localhost:8080/events\");\n\n  if (!response.ok) {\n    // return { isError: true, message: \"Could not fetch events\" };\n    //\n    // throw new Response(JSON.stringify({ message: \"Could not fetch events.\" }), {\n    //   status: 500,\n    // });\n    throw json(\n      { message: \"Could not fetch events.\" },\n      {\n        status: 500,\n      }\n    );\n  } else {\n    // const resData = await response.json();\n    // return resData.events;\n    return response;\n  }\n}\n\nexport function loader() {\n  defer({\n    events: loadEvents(),\n  });\n}\n"],"mappings":";;AAAA,OAAOA,UAAU,MAAM,0BAA0B;AAEjD,SAASC,KAAK,EAAEC,IAAI,EAAEC,aAAa,EAAEC,KAAK,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErE,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EACpB,MAAM;IAAEC;EAAO,CAAC,GAAGN,aAAa,EAAE;EAElC,oBACEG,OAAA,CAACF,KAAK;IAACM,OAAO,EAAED,MAAO;IAAAE,QAAA,EACnBC,YAAY,iBAAKN,OAAA,CAACN,UAAU;MAACS,MAAM,EAAEG;IAAa;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAG;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACjD;AAEZ;AAACR,EAAA,CARQD,UAAU;EAAA,QACEJ,aAAa;AAAA;AAAAc,EAAA,GADzBV,UAAU;AAUnB,eAAeA,UAAU;AAEzB,eAAeW,UAAUA,CAAA,EAAG;EAC1B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;EAE5D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IAChB;IACA;IACA;IACA;IACA;IACA,MAAMnB,IAAI,CACR;MAAEoB,OAAO,EAAE;IAA0B,CAAC,EACtC;MACEC,MAAM,EAAE;IACV,CAAC,CACF;EACH,CAAC,MAAM;IACL;IACA;IACA,OAAOJ,QAAQ;EACjB;AACF;AAEA,OAAO,SAASK,MAAMA,CAAA,EAAG;EACvBvB,KAAK,CAAC;IACJQ,MAAM,EAAES,UAAU;EACpB,CAAC,CAAC;AACJ;AAAC,IAAAD,EAAA;AAAAQ,YAAA,CAAAR,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}